from message_class import message
import re

class msg_generator:

    convertibletypes = {"IA5String": 'string', "UTF8String": 'string', 'INTEGER': 'int64', 'BOOLEAN' : 'uint8' }
    
    knowntypes = list(('SEQUENCE', 'SEQUENCEOF', 'CHOICE', 'NULL', 'ABSENT'))

    def __init__(self):
        pass

    def generate(self, messages):
        failedMessages = 0
        for msg in messages:
            # create Header
            msgString = '# ' + msg.name + ".msg\n"
            msgString = msgString + '# Auto Generated by ASN1toROS2 tool\n'
            msgString = msgString + '# original asn1 type: ' + str(msg.type) + '\n\n'

            # create contents:
            if (msg.type == 'SEQUENCE') or (msg.type == 'CHOICE'):
                for idx, e in enumerate(msg.varlist):
                    if e == 'COMPONENTS':
                        continue
                    if msg.varlist[e] in self.convertibletypes:
                        msgString = msgString + e + ' ' + self.convertibletypes[msg.varlist[e]] + '\n'
                        continue
                    if msg.varlist[e] == 'SEQUENCE':
                        print(msg.contentsList[idx][0][msg._pos_trailer])
                        regex = re.compile('(OF)(\s)+([-a-zA-Z0-9]*)')
                        ofType = regex.findall(msg.contentsList[idx][0][msg._pos_trailer])
                        print(ofType)
                        msgString = msgString + e + '[] ' + ofType[0][2] + '\n'
                        continue
                    msgString = msgString + e + ' ' + msg.varlist[e] + '\n'
                        
            # create new file:
            try:
                msgFile = open('msg/' + msg.name + '.msg', 'x')
                msgFile.write(msgString)
                msgFile.close()
            except FileExistsError as e:
                failedMessages = failedMessages + 1
                print('failed due to FileExistsError:   ' + msg.name)
        print(str(failedMessages) + ' Messages of ' + str(len(messages)) + ' have failed.')
