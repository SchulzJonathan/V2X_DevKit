from message_class import message
import re

class msg_generator:

    convertibletypes = {"IA5String": 'string', "UTF8String": 'string', 'INTEGER': 'int64', 'BOOLEAN' : 'uint8' }
    
    knowntypes = list(('SEQUENCE', 'SEQUENCEOF', 'CHOICE', 'NULL', 'ABSENT'))

    def __init__(self):
        pass

    def generate(self, messages):
        failedMessages = 0
        for msg in messages:
            # create Header
            msgString = '# ' + msg.name + ".msg\n"
            msgString = msgString + '# Auto Generated by ASN1toROS2 tool\n'
            msgString = msgString + '# original asn1 type: ' + str(msg.type) + '\n\n'

            # create contents:
            if (msg.type == 'SEQUENCE') or (msg.type == 'CHOICE'):
                for e in msg.contentsList:
                    if not e:
                        continue
                    e = e[0]
                    if e[msg._pos_variable] == 'COMPONENTS':
                        continue
                    # check if its a known type:
                    if e[msg._pos_type] in self.convertibletypes:
                        msgString = msgString + self.convertibletypes[e[msg._pos_type]] + ' ' + e[msg._pos_variable] + '\n'
                        continue
                    # 
                    if e[msg._pos_type] == 'SEQUENCE':
                        regex = re.compile('(OF)(\s)+([-a-zA-Z0-9]*)')
                        ofType = regex.findall(e[msg._pos_trailer])
                        msgString = msgString + ofType[0][2] + '[] ' + e[msg._pos_variable] + '\n'
                        continue
                    msgString = msgString + e[msg._pos_variable] + ' ' + e[msg._pos_variable] + '\n'
            elif (msg.type == 'SEQUENCEOF'):
                msgString = msgString + msg.sequenceof + '[] ' + msg.name + '\n'
            elif (msg.type == 'INTEGER'):
                msgString = msgString + 'int ' + msg.name + '\n'
                        
            # create new file:
            try:
                msgFile = open('msg/' + msg.name + '.msg', 'x')
                msgFile.write(msgString)
                msgFile.close()
            except FileExistsError as e:
                failedMessages = failedMessages + 1
                print('failed due to FileExistsError:   ' + msg.name)
        print(str(failedMessages) + ' Messages of ' + str(len(messages)) + ' have failed.')
